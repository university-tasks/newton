//
//  count.cpp
//  Newton(Task3)
//
//  Created by Артем Белов on 25.05.2020.
//  Copyright © 2020 Артем Белов. All rights reserved.
//

#include "count.hpp"
#include <cmath>

void countJ(double** J, double* x) {

    J[0][0] = -x[1] * sin(x[1] * x[0]);
    J[0][1] = -x[0] * sin(x[1] * x[0]);
    J[0][2] = 3.0 * exp(-(3.0 * x[2]));
    J[0][3] = x[4] * x[4];
    J[0][4] = 2.0 * x[3] * x[4];
    J[0][5] = -1.0;
    J[0][6] = 0.0;
    J[0][7] = -2.0 * cosh(2.0 * x[7]) * x[8];
    J[0][8] = -sinh(2.0 * x[7]);
    J[0][9] = 2.0;
    J[1][0] = x[1] * cos(x[1] * x[0]);
    J[1][1] = x[0] * cos(x[1] * x[0]);
    J[1][2] = x[8] * x[6];
    J[1][3] = 0.0;
    J[1][4] = 6.0 * x[4];
    J[1][5] = -exp(-x[9] + x[5]) - x[7] - 1.0;
    J[1][6] = x[2] * x[8];
    J[1][7] = -x[5];
    J[1][8] = x[2] * x[6];
    J[1][9] = exp(-x[9] + x[5]);
    J[2][0] = 1;
    J[2][1] = -1;
    J[2][2] = 1;
    J[2][3] = -1;
    J[2][4] = 1;
    J[2][5] = -1;
    J[2][6] = 1;
    J[2][7] = -1;
    J[2][8] = 1;
    J[2][9] = -1;
    J[3][0] = -x[4] * pow(x[2] + x[0], -2.0);
    J[3][1] = -2.0 * x[1] * cos(x[1] * x[1]);
    J[3][2] = -x[4] * pow(x[2] + x[0], -2.0);
    J[3][3] = -2.0 * sin(-x[8] + x[3]);
    J[3][4] = 1.0 / (x[2] + x[0]);
    J[3][5] = 0;
    J[3][6] = -2.0 * cos(x[6] * x[9]) * x[9] * sin(x[6] * x[9]);
    J[3][7] = -1;
    J[3][8] = 2.0 * sin(-x[8] + x[3]);
    J[3][9] = -2.0 * cos(x[6] * x[9]) * x[6] * sin(x[6] * x[9]);
    J[4][0] = 2 * x[7];
    J[4][1] = -2.0 * sin(x[1]);
    J[4][2] = 2 * x[7];
    J[4][3] = pow(-x[8] + x[3], -2.0);
    J[4][4] = cos(x[4]);
    J[4][5] = x[6] * exp(-x[6] * (-x[9] + x[5]));
    J[4][6] = -(x[9] - x[5]) * exp(-x[6] * (-x[9] + x[5]));
    J[4][7] = (2 * x[2]) + 2.0 * x[0];
    J[4][8] = -pow(-x[8] + x[3], -2.0);
    J[4][9] = -x[6] * exp(-x[6] * (-x[9] + x[5]));
    J[5][0] = exp(x[0] - x[3] - x[8]);
    J[5][1] = -3.0 / 2.0 * x[9] * sin(3.0 * x[9] * x[1]);
    J[5][2] = -x[5];
    J[5][3] = -exp(x[0] - x[3] - x[8]);
    J[5][4] = 2 * x[4] / x[7];
    J[5][5] = -x[2];
    J[5][6] = 0;
    J[5][7] = -x[4] * x[4] * pow(x[7], (-2));
    J[5][8] = -exp(x[0] - x[3] - x[8]);
    J[5][9] = -3.0 / 2.0 * x[1] * sin(3.0 * x[9] * x[1]);
    J[6][0] = cos(x[3]);
    J[6][1] = 3.0 * x[1] * x[1] * x[6];
    J[6][2] = 1;
    J[6][3] = -(x[0] - x[5]) * sin(x[3]);
    J[6][4] = x[9] * pow(x[4], (-2)) * cos(x[9] / x[4] + x[7]);
    J[6][5] = -cos(x[3]);
    J[6][6] = pow(x[1], 3.0);
    J[6][7] = -cos(x[9] / x[4] + x[7]);
    J[6][8] = 0;
    J[6][9] = -1.0 / x[4] * cos(x[9] / x[4] + x[7]);
    J[7][0] = 2.0 * x[4] * (x[0] - 2.0 * x[5]);
    J[7][1] = -x[6] * exp(x[1] * x[6] + x[9]);
    J[7][2] = -2.0 * cos(-x[8] + x[2]);
    J[7][3] = 1.5;
    J[7][4] = pow(x[0] - 2.0 * x[5], 2.0);
    J[7][5] = -4.0 * x[4] * (x[0] - 2.0 * x[5]);
    J[7][6] = -x[1] * exp(x[1] * x[6] + x[9]);
    J[7][7] = 0;
    J[7][8] = 2.0 * cos(-x[8] + x[2]);
    J[7][9] = -exp(x[1] * x[6] + x[9]);
    J[8][0] = -3;
    J[8][1] = -2.0 * x[7] * x[9] * x[6];
    J[8][2] = 0;
    J[8][3] = exp((x[4] + x[3]));
    J[8][4] = exp((x[4] + x[3]));
    J[8][5] = -7.0 * pow(x[5], -2.0);
    J[8][6] = -2.0 * x[1] * x[7] * x[9];
    J[8][7] = -2.0 * x[1] * x[9] * x[6];
    J[8][8] = 3;
    J[8][9] = -2.0 * x[1] * x[7] * x[6];
    J[9][0] = x[9];
    J[9][1] = x[8];
    J[9][2] = -x[7];
    J[9][3] = cos(x[3] + x[4] + x[5]) * x[6];
    J[9][4] = cos(x[3] + x[4] + x[5]) * x[6];
    J[9][5] = cos(x[3] + x[4] + x[5]) * x[6];
    J[9][6] = sin(x[3] + x[4] + x[5]);
    J[9][7] = -x[2];
    J[9][8] = x[1];
    J[9][9] = x[0];

}

void countF(double* F, double* x) {

    F[0] = cos(x[1] * x[0]) - exp(-(3.0 * x[2])) + x[3] * x[4] * x[4] - x[5] - sinh((2.0 * x[7])) * x[8] + (2.0 * x[9]) + 2.000433974165385440;
    F[1] = sin(x[1] * x[0]) + x[2] * x[8] * x[6] - exp(-x[9] + x[5]) + 3.0 * x[4] * x[4] - x[5] * (x[7] + 1.0) + 10.886272036407019994;
    F[2] = x[0] - x[1] + x[2] - x[3] + x[4] - x[5] + x[6] - x[7] + x[8] - x[9] - 3.1361904761904761904;
    F[3] = 2.0 * cos(-x[8] + x[3]) + x[4] / (x[2] + x[0]) - sin(x[1] * x[1]) + pow(cos(x[6] * x[9]), 2.0) - x[7] - 0.1707472705022304757;
    F[4] = sin(x[4]) + 2.0 * x[7] * (x[2] + x[0]) - exp(-x[6] * (-x[9] + x[5])) + 2.0 * cos(x[1]) - 1.0 / (-x[8] + x[3]) - 0.3685896273101277862;
    F[5] = exp(x[0] - x[3] - x[8]) + x[4] * x[4] / x[7] + cos(3.0 * x[9] * x[1]) / 2.0 - x[5] * x[2] + 2.0491086016771875115;
    F[6] = pow(x[1], 3.0) * x[6] - sin(x[9] / x[4] + x[7]) + (x[0] - x[5]) * cos(x[3]) + x[2] - 0.7380430076202798014;
    F[7] = x[4] * pow(x[0] - 2.0 * x[5], 2.0) - 2.0 * sin(-x[8] + x[2]) + 1.5 * x[3] - exp(x[1] * x[6] + x[9]) + 3.5668321989693809040;
    F[8] = 7.0 / x[5] + exp(x[4] + x[3]) - 2.0 * x[1] * x[7] * x[9] * x[6] + 3.0 * x[8] - 3.0 * x[0] - 8.4394734508383257499;
    F[9] = x[9] * x[0] + x[8] * x[1] - (x[7] * x[2]) + sin(x[3] + x[4] + x[5]) * x[6] - 0.78238095238095238096;

}
